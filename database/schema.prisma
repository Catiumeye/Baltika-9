generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  type        AuthType
  user_id     String   @id @db.Uuid
  external_id String   @db.VarChar

  user     User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("auth")
}

enum AuthType {
  JWT
  GOOGLE
  GITHUB
}

model Session {
  id            String   @id @default(uuid())
  ip            String?  @db.Inet
  user_id       String   @db.Uuid
  is_used       Boolean  @db.Boolean @default(false)
  metadata      Json     @db.JsonB
  refresh_token String   @unique @db.VarChar
  
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model User {
  id         String     @id @default(uuid()) @db.Uuid
  username   String     @unique @db.VarChar(30)
  email      String     @unique @db.VarChar
  password   String?    @db.VarChar
  status     UserStatus @default(PENDING)
  role       UserRole   @default(USER)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted    DateTime?  @map("deleted_at")

  auth    Auth?
  profile UserProfile?
  files   File[]
  sessions Session[]

  @@map("user")
}

enum UserRole {
  USER
  MODER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  FROZEN
  BLOCKED
}

model UserProfile {
  user_id     String   @id @db.Uuid
  bio         String?  @db.VarChar
  last_active DateTime @default(now())

  user           User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  topics         Topic[]
  topic_comments TopicComment[]
  avatars Avatar[]

  @@map("user_profile")
}

model Topic {
  id          String      @id @default(uuid()) @db.Uuid
  author_id   String      @db.Uuid
  category_id String      @db.Uuid
  status      TopicStatus
  title       String
  content     String
  tags        String[]
  deleted     DateTime?   @map("deleted_at")

  author   UserProfile    @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  category TopicCategory  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  comments TopicComment[]

  @@map("topic")
}

enum TopicStatus {
  VISIBLE
  HIDDEN
}

model TopicCategory {
  id     String              @id @default(uuid()) @db.Uuid
  title  String              @unique @db.VarChar()
  status TopicCategoryStatus @default(VISIBLE)

  topics Topic[]

  @@map("topic_category")
}

enum TopicCategoryStatus {
  VISIBLE
  HIDDEN
}

model TopicComment {
  id        String    @id @unique() @default(uuid()) @db.Uuid
  topic_id  String    @db.Uuid
  author_id String    @db.Uuid
  parent_id String?   @db.Uuid
  message   String    @db.VarChar
  deleted   DateTime? @map("deleted_at")

  author   UserProfile    @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  topic    Topic          @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  parrent  TopicComment?  @relation("ParentChildrenTopicComment", fields: [parent_id], references: [id])
  children TopicComment[] @relation("ParentChildrenTopicComment")

  @@map("topic_comment")
}

model File {
  id         String   @id @default(uuid()) @db.Uuid
  file_id    String   @db.VarChar
  bucket     String   @db.VarChar
  url        String   @db.Text
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  avatars Avatar[]

  @@map("file")
}

model Avatar {
  id      String  @id @default(uuid()) @db.Uuid
  user_id String  @db.Uuid
  file_id String? @db.Uuid
  url     String? @db.VarChar

  user UserProfile  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  file File? @relation(fields: [file_id], references: [id], onDelete: Cascade)

  @@map("avatar")
}
